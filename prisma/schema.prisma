datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

model User {
  id         String      @id @db.Uuid
  firstName  String
  lastName   String
  userType   UserType
  student    Student?
  staff      Staff?
  instructor Instructor?
  advisor    Advisor?
}

model Student {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  major       Major        @relation(fields: [majorId], references: [id])
  majorId     Int
  // TODO: must start with 'U'. May have to leave it application level validation
  studentId   String
  enrollments Enrollment[]
}

model Instructor {
  id                  Int                  @id @default(autoincrement())
  user                User                 @relation(fields: [userId], references: [id])
  userId              String               @unique
  department          Department           @relation(fields: [departmentId], references: [id])
  departmentId        Int
  teachingAssignments TeachingAssignment[]
}

model Advisor {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  departments Department[]
}

model Staff {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @unique
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
}

model Major {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  department   Department  @relation("ExtraMajors", fields: [departmentId], references: [id])
  uniqueIn     Department? @relation("UniqueMajor")
  departmentId Int
  students     Student[]
}

model Course {
  id                  Int                  @id @default(autoincrement())
  prefix              String
  number              Int
  name                String
  // TODO: enfore check for credits only from 1 to 4. May have to leave it application level validation
  credits             Int
  department          Department           @relation(fields: [departmentId], references: [id])
  departmentId        Int
  enrollments         Enrollment[]
  teachingAssignments TeachingAssignment[]

  @@unique([prefix, number])
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId Int
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  grade      Grade?

  // a student cannot enroll in the same course twice in the same semester
  @@unique([studentId, courseId, semesterId])
}

model TeachingAssignment {
  id           Int        @id @default(autoincrement())
  semester     Semester   @relation(fields: [semesterId], references: [id])
  semesterId   Int
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId Int
  course       Course     @relation(fields: [courseId], references: [id])
  courseId     Int

  // an instructor cannot teach the same course twice in the same semester
  @@unique([instructorId, courseId, semesterId])
}

model Semester {
  id                  Int                  @id @default(autoincrement())
  year                Int
  season              Season
  enrollments         Enrollment[]
  teachingAssignments TeachingAssignment[]

  @@unique([year, season])
}

model Department {
  id            Int          @id @default(autoincrement())
  name          String
  uniqueMajor   Major        @relation("UniqueMajor", fields: [uniqueMajorId], references: [id])
  uniqueMajorId Int          @unique
  extraMajors   Major[]      @relation("ExtraMajors")
  staff         Staff[]
  instructors   Instructor[]
  advisors      Advisor[]
  courses       Course[]
}

enum UserType {
  STUDENT
  INSTRUCTOR
  STAFF
  ADVISOR
}

enum Grade {
  A
  B
  C
  D
  F
  I
  S
  U
}

enum Season {
  FALL
  SPRING
  SUMMER
}
